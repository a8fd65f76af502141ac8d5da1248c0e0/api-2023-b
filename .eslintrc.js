module.exports = {
    parser: "@typescript-eslint/parser",
    parserOptions: {
        tsconfigRootDir: __dirname,
        sourceType: "module",
    },
    plugins: ["@typescript-eslint/eslint-plugin", "unused-imports", "import", "prettier", "no-relative-import-paths"],
    extends: ["plugin:@typescript-eslint/recommended", "plugin:@typescript-eslint/recommended-requiring-type-checking"],
    root: true,
    env: {
        node: true,
        jest: true,
    },
    ignorePatterns: [".eslintrc.js", "*.js"],
    rules: {
        "prettier/prettier": "error",
        "@typescript-eslint/await-thenable": "off",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-implied-eval": "off",
        "@typescript-eslint/no-misused-promises": "off",
        "@typescript-eslint/no-unnecessary-type-assertion": "off",
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/require-await": "off",
        "@typescript-eslint/restrict-plus-operands": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "@typescript-eslint/unbound-method": "off",
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/parameter-properties": [
            "warn",
            {
                prefer: "parameter-property",
                allow: ["private readonly", "protected readonly"],
            },
        ],
        "@typescript-eslint/no-unused-vars": "off",
        "unused-imports/no-unused-imports": "error",
        "import/no-cycle": "error",
        "import/exports-last": "error",
        "import/no-useless-path-segments": "error",
        "@typescript-eslint/naming-convention": [
            "error",
            {
                selector: "default",
                format: ["camelCase"],
                leadingUnderscore: "forbid",
                trailingUnderscore: "forbid",
            },
            {
                selector: "variable",
                modifiers: ["const"],
                format: ["camelCase", "PascalCase", "UPPER_CASE"],
            },
            {
                selector: "parameter",
                format: ["camelCase"],
                leadingUnderscore: "allow",
                trailingUnderscore: "forbid",
            },
            {
                selector: "variableLike",
                format: ["camelCase"],
                leadingUnderscore: "forbid",
                trailingUnderscore: "forbid",
            },
            {
                selector: "method",
                format: ["camelCase"],
                leadingUnderscore: "forbid",
                trailingUnderscore: "forbid",
            },
            {
                selector: "typeLike",
                format: ["StrictPascalCase"],
            },
            {
                selector: "interface",
                suffix: ["Interface", "Port", "UseCase", "Usecase", "Entity", "ValueObject"],
                format: ["StrictPascalCase"],
            },
            {
                selector: "class",
                modifiers: ["abstract"],
                format: ["StrictPascalCase"],
                prefix: ["Abstract"],
            },
            {
                selector: ["typeAlias"],
                format: ["StrictPascalCase"],
            },
            {
                selector: "class",
                modifiers: ["exported"],
                format: ["StrictPascalCase"],
                suffix: [
                    "Filter",
                    "Service",
                    "Adapter",
                    "Impl",
                    "Dto",
                    "Mapper",
                    "Assembler",
                    "Controller",
                    "Module",
                    "Guard",
                    "Exception",
                    "Config",
                    "Builder",
                    "Command",
                    "Entity",
                    "Helper",
                    "Factory",
                ],
            },
            {
                selector: "enumMember",
                format: ["UPPER_CASE"],
            },
            {
                selector: "classProperty",
                modifiers: ["readonly", "static"],
                format: ["UPPER_CASE"],
            },
        ],
    },
};
